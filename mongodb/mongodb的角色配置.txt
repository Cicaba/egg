MongoDB数据库角色

内建的角色 
数据库用户角色：read、readWrite; 
数据库管理角色：dbAdmin、dbOwner、userAdmin； 
集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； 
备份恢复角色：backup、restore； 
所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase 
超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase） 
内部角色：__system 
角色说明： 
Read：允许用户读取指定数据库 
readWrite：允许用户读写指定数据库 
dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile 
userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户 
clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。 
readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限 
readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限 
userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限 
dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。 
root：只在admin数据库中可用。超级账号，超级权限

db.grantRolesToUser(
	"cicaba",
	[{role:"readWrite", db:"dbAdmin"}]
)
db.createUser(
  {
    user: "cicaba",
    pwd: "515253",
    roles: [ { role: "dbAdmin", db: "cicaba" } ]
  }
)
创建超级管理员
db.createUser(
  {
    user: "cicabaAdmin",
    pwd: "515253",
    roles: [ { role: "root", db: "admin" } ]
  }
)
所有数据库角色
use admin
db.createUser(
  {
    user: "cicaba",
    pwd: "515253",
    roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
  }
)

修改用户权限
进入mongodb的安装目录中的bin目录，再执行命令：mongo.exe， 
接着敲如下命令：

db.grantRolesToUser(
	"yutao",
	[{role:"readWrite", db:"myTest"}]
)
以上命令意思是：修改账号yutao的权限，给其增加个数据库myTest的读写权。 
注： 
①账号yutao，原本具有数据库test的读写权。 
②这里我使用的是db.grantRolesToUser()命令，而没有使用db.updateUser()命令的原因是，后者会替换账号的原有的角色，而前者是追加。通俗点讲就是： 
账号yutao，原有权限A,我现在想再给它一个权限B,使用updateUser呢，是把A权限替换为B权限，也就是现在账号yutao，只有B权限，而grantRolesToUser，是追加一个B权限，即账号yutao，即有A权限，又有B权限。

删除权限

db.revokeRolesFromUser("yutao",[{role:"read", db:"myTest"}])